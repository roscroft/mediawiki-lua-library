{{Documentation}}
{{Helper module
|name = TableTools

|fname1 = <nowiki>_deepCopy(&nbsp;orig, includeMetatable, already_seen&nbsp;)</nowiki>
|ftype1 = <samp>orig: any</samp><br><samp>includeMetatable: boolean</samp><br><samp>already_seen: table<table, table></samp><br><samp>-> any</samp>
|fuse1 = Internal recursive function for deep copying

Type definitions:
* orig: Original value to copy
* includeMetatable: Whether to include metatables
* already_seen: Cache to prevent infinite recursion

|fname2 = <nowiki>affixNums(&nbsp;t, prefix, suffix&nbsp;)</nowiki>
|ftype2 = <samp>t: table</samp><br><samp>prefix: any</samp><br><samp>suffix: any</samp><br><samp>-> integer[]</samp>
|fuse2 = Extract numeric keys from string keys with given prefix/suffix pattern

Type definitions:
* t: Table to search

|fname3 = <nowiki>all(&nbsp;t, predicate&nbsp;)</nowiki>
|ftype3 = <samp>t: table Table to check</samp><br><samp>predicate: function Function that returns true for matching elements</samp><br><samp>-> boolean</samp>
|fuse3 = Check if all elements in a table match a predicate

|fname4 = <nowiki>any(&nbsp;t, predicate&nbsp;)</nowiki>
|ftype4 = <samp>t: table Table to check</samp><br><samp>predicate: function Function that returns true for matching elements</samp><br><samp>-> boolean</samp>
|fuse4 = Check if any element in a table matches a predicate

|fname5 = <nowiki>cleanPattern(&nbsp;s&nbsp;)</nowiki>
|ftype5 = <samp>s: any</samp><br><samp>-> any</samp>
|fuse5 = No description available.

|fname6 = <nowiki>compressSparseArray(&nbsp;t&nbsp;)</nowiki>
|ftype6 = <samp>t: table Sparse array to compress</samp><br><samp>-> table</samp>
|fuse6 = Remove nil values from sparse array while preserving order

|fname7 = <nowiki>count(&nbsp;t, predicate&nbsp;)</nowiki>
|ftype7 = <samp>t: table Table to search</samp><br><samp>predicate: function Function that returns true for matching elements</samp><br><samp>-> integer</samp>
|fuse7 = Count elements that match a predicate function

|fname8 = <nowiki>deepCopy(&nbsp;orig, noMetatable, already_seen&nbsp;)</nowiki>
|ftype8 = <samp>orig: any</samp><br><samp>noMetatable: any</samp><br><samp>already_seen: any</samp><br><samp>-> any</samp>
|fuse8 = Create a deep copy of a table with MediaWiki-specific metatable handling

Type definitions:
* orig: Original value to copy

|fname9 = <nowiki>defaultKeySort(&nbsp;item1, item2&nbsp;)</nowiki>
|ftype9 = <samp>item1: any First item to compare</samp><br><samp>item2: any Second item to compare</samp><br><samp>-> boolean</samp>
|fuse9 = Default comparison function for sorting keys

|fname10 = <nowiki>find(&nbsp;t, predicate&nbsp;)</nowiki>
|ftype10 = <samp>t: table Table to search</samp><br><samp>predicate: function Function that returns true for matching elements</samp><br><samp>-> any {{!}} nil</samp>
|fuse10 = Find the first element that matches a predicate

|fname11 = <nowiki>first(&nbsp;t&nbsp;)</nowiki>
|ftype11 = <samp>t: any</samp><br><samp>-> any</samp>
|fuse11 = --------------------------------------------------------------------------------- Utilities --------------------------------------------------------------------------------- ]]

|fname12 = <nowiki>invert(&nbsp;array&nbsp;)</nowiki>
|ftype12 = <samp>array: any</samp><br><samp>-> any</samp>
|fuse12 = --------------------------------------------------------------------------------- Set operations --------------------------------------------------------------------------------- ]]

|fname13 = <nowiki>isArray(&nbsp;t&nbsp;)</nowiki>
|ftype13 = <samp>t: table</samp><br><samp>-> boolean</samp>
|fuse13 = Check if a table is a proper array (consecutive integer keys starting from 1)

Type definitions:
* t: Table to check

|fname14 = <nowiki>isEmpty(&nbsp;t&nbsp;)</nowiki>
|ftype14 = <samp>t: table Table to check</samp><br><samp>-> boolean</samp>
|fuse14 = Check if a table is empty

|fname15 = <nowiki>isNan(&nbsp;num&nbsp;)</nowiki>
|ftype15 = <samp>num: any</samp><br><samp>-> boolean</samp>
|fuse15 = Check if a value is NaN (Not a Number)

Type definitions:
* num: Value to check

|fname16 = <nowiki>isPositiveInteger(&nbsp;num&nbsp;)</nowiki>
|ftype16 = <samp>num: any</samp><br><samp>-> any</samp>
|fuse16 = --------------------------------------------------------------------------------- Type checking --------------------------------------------------------------------------------- ]]

|fname17 = <nowiki>iter(&nbsp;tbl, currentKey&nbsp;)</nowiki>
|ftype17 = <samp>tbl: any</samp><br><samp>currentKey: any</samp><br><samp>-> any</samp>
|fuse17 = No description available.

|fname18 = <nowiki>iterator(&nbsp;elements, i&nbsp;)</nowiki>
|ftype18 = <samp>elements: any</samp><br><samp>i: any</samp><br><samp>-> any</samp>
|fuse18 = No description available.

|fname19 = <nowiki>keys(&nbsp;t&nbsp;)</nowiki>
|ftype19 = <samp>t: table Table to get keys from</samp><br><samp>-> any[]</samp>
|fuse19 = Get all keys from a table

|fname20 = <nowiki>keysToList(&nbsp;t, keySort, checked&nbsp;)</nowiki>
|ftype20 = <samp>t: table Table whose keys to extract</samp><br><samp>keySort: any</samp><br><samp>checked: any</samp><br><samp>-> any[]</samp>
|fuse20 = Convert table keys to a sorted list

|fname21 = <nowiki>length(&nbsp;t&nbsp;)</nowiki>
|ftype21 = <samp>t: any</samp><br><samp>-> any</samp>
|fuse21 = --------------------------------------------------------------------------------- Table length ops --------------------------------------------------------------------------------- ]]

|fname22 = <nowiki>listToSet(&nbsp;t&nbsp;)</nowiki>
|ftype22 = <samp>t: table Array to convert to set</samp><br><samp>-> table<any,</samp>
|fuse22 = Convert an array to a set (values become keys with true values)

|fname23 = <nowiki>numData(&nbsp;t, compress&nbsp;)</nowiki>
|ftype23 = <samp>t: table Input table with mixed keys</samp><br><samp>compress: any</samp><br><samp>-> table</samp>
|fuse23 = Convert a table with numbered keys into a more structured format

|fname24 = <nowiki>numKeys(&nbsp;t&nbsp;)</nowiki>
|ftype24 = <samp>t: any</samp><br><samp>-> any</samp>
|fuse24 = --------------------------------------------------------------------------------- Numerical key functions --------------------------------------------------------------------------------- ]]

|fname25 = <nowiki>opairs(&nbsp;t&nbsp;)</nowiki>
|ftype25 = <samp>t: table Table to iterate over</samp><br><samp>-> function</samp>
|fuse25 = Iterator for ordered pairs (keys sorted by type, then value)

|fname26 = <nowiki>ospairs(&nbsp;t&nbsp;)</nowiki>
|ftype26 = <samp>t: table Table to iterate over</samp><br><samp>-> function</samp>
|fuse26 = Iterator for ordered string pairs (string keys only, sorted)

|fname27 = <nowiki>shallowClone(&nbsp;t&nbsp;)</nowiki>
|ftype27 = <samp>t: any</samp><br><samp>-> any</samp>
|fuse27 = --------------------------------------------------------------------------------- Cloning --------------------------------------------------------------------------------- ]]

|fname28 = <nowiki>size(&nbsp;t&nbsp;)</nowiki>
|ftype28 = <samp>t: table Table to count</samp><br><samp>-> integer</samp>
|fuse28 = Get total number of key-value pairs in a table For arrays, use Array.len() instead for better performance

|fname29 = <nowiki>sortFunc(&nbsp;lhs, rhs&nbsp;)</nowiki>
|ftype29 = <samp>lhs: any</samp><br><samp>rhs: any</samp><br><samp>-> any</samp>
|fuse29 = No description available.

|fname30 = <nowiki>sortedPairs(&nbsp;t, keySort&nbsp;)</nowiki>
|ftype30 = <samp>t: table Table to iterate over</samp><br><samp>keySort: any</samp><br><samp>-> function</samp>
|fuse30 = Iterator that traverses table in sorted key order

|fname31 = <nowiki>sortedPairsByValue(&nbsp;t, valueSort&nbsp;)</nowiki>
|ftype31 = <samp>t: table Table to iterate over</samp><br><samp>valueSort: any</samp><br><samp>-> integer</samp>
|fuse31 = Iterator that traverses table sorted by values

|fname32 = <nowiki>spairs(&nbsp;t&nbsp;)</nowiki>
|ftype32 = <samp>t: table Table to iterate over</samp><br><samp>-> nil</samp>
|fuse32 = Iterator for string keys only

|fname33 = <nowiki>sparseConcat(&nbsp;t, sep, i, j&nbsp;)</nowiki>
|ftype33 = <samp>t: any</samp><br><samp>sep: any</samp><br><samp>i: any</samp><br><samp>j: any</samp><br><samp>-> any</samp>
|fuse33 = --------------------------------------------------------------------------------- Sparse table operations --------------------------------------------------------------------------------- ]]

|fname34 = <nowiki>sparseIpairs(&nbsp;t&nbsp;)</nowiki>
|ftype34 = <samp>t: any</samp><br><samp>-> any</samp>
|fuse34 = --------------------------------------------------------------------------------- Specialised iterators --------------------------------------------------------------------------------- ]]

|fname35 = <nowiki>values(&nbsp;t&nbsp;)</nowiki>
|ftype35 = <samp>t: table Table to get values from</samp><br><samp>-> any[]</samp>
|fuse35 = Get all values from a table
}}