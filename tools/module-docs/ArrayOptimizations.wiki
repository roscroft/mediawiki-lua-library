{{Documentation}}
{{Helper module
|name = ArrayOptimizations

|fname1 = <nowiki>fast.filter(&nbsp;arr, fn&nbsp;)</nowiki>
|ftype1 = <samp>generic: T</samp><br><samp>arr: T</samp><br><samp>fn: function</samp><br><samp>-> T</samp>
|fuse1 = Fast filter with optimized predicate caching

|fname2 = <nowiki>fast.map(&nbsp;arr, fn, useMemo&nbsp;)</nowiki>
|ftype2 = <samp>arr: any</samp><br><samp>fn: any</samp><br><samp>useMemo: any</samp><br><samp>-> any</samp>
|fuse2 = Create performance-optimized versions of common operations

|fname3 = <nowiki>benchmark(&nbsp;operation, iterations, warmup&nbsp;)</nowiki>
|ftype3 = <samp>operation: function Function to benchmark</samp><br><samp>iterations: any</samp><br><samp>warmup: any</samp><br><samp>-> table</samp>
|fuse3 = Benchmark utility for measuring array operation performance

|fname4 = <nowiki>clearCache(&nbsp;&nbsp;)</nowiki>
|ftype4 = <samp>-> any</samp>
|fuse4 = Memoization cache for frequently called array operations

|fname5 = <nowiki>getMemoryInfo(&nbsp;arr&nbsp;)</nowiki>
|ftype5 = <samp>arr: any[]</samp><br><samp>-> table</samp>
|fuse5 = Get memory usage statistics for an array

|fname6 = <nowiki>len(&nbsp;arr&nbsp;)</nowiki>
|ftype6 = <samp>arr: any[] Array to measure (can be standard array or proxy table)</samp><br><samp>-> integer</samp>
|fuse6 = Calculates the length of arrays including proxy arrays  This function provides optimized length calculation for different array types: - Standard arrays: Uses native # operator (O(1)) - Proxy arrays: Uses exponential search followed by binary search (O(log n)) - Empty arrays: Quick detection and return (O(1)) 

Performance characteristics:
* Performance characteristics:
* Standard arrays with consecutive integer keys: O(1)
* Proxy arrays or arrays with holes: O(log n)
* Empty arrays: O(1) with early detection

Examples:
<syntaxhighlight lang='lua'>
local std_array = {1, 2, 3}  -- Standard array
local proxy_array = setmetatable({[1] = 'a', [2] = 'b'}, proxy_mt)
print(len(std_array))    -- 3 (O(1) operation)
print(len(proxy_array))  -- 2 (O(log n) operation)
print(len({}))           -- 0 (O(1) early detection)
</syntaxhighlight>

|fname7 = <nowiki>memoize(&nbsp;fn, keyGenerator&nbsp;)</nowiki>
|ftype7 = <samp>generic: T</samp><br><samp>fn: fun(...: T): R Function to memoize</samp><br><samp>keyGenerator: any</samp><br><samp>-> fun(...:</samp>
|fuse7 = Memoize a function with array-aware key generation

|fname8 = <nowiki>sizeof(&nbsp;obj, visited&nbsp;)</nowiki>
|ftype8 = <samp>obj: any</samp><br><samp>visited: any</samp><br><samp>-> any</samp>
|fuse8 = No description available.
}}